/*
Configuration for UVAP Microservices.
Copyright (C) 2014,2018 Ultinous Inc.
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This proto describes the functional configuration of the building blocks of video analysis.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

package ultinous.proto.kafka;

option java_package = "com.ultinous.proto.kafka";
option java_multiple_files = true;

import "ultinous/proto/common/kafka_common.proto";

/** Configuration for kafka_tracker
*/
message TrackingConfigRecord
{
  /** Confidence threshold for filtering input ObjectDetectionRecords.
  Records whose detection_confidence value is above this threshold will be kept.
  range: [0..1); 0 means no filtering
  default: 0
  */
  float detection_threshold = 1;

  /** Maximum distance of track points in subsequent frames for track to be connected.
  unit: bounding box width
  range: (0..+inf)
  default: 2
  */
  float distance_threshold = 2;

  /** Maximum lifetime of a track without new detection.
  unit: msec
  range: [0..+inf)
  default: 1000
  */
  uint32 time_passed_threshold = 3;
}

/** Configuration for kafka_passdet
*/
message PassDetConfigRecord
{
  message PassLine
  {
    /** Identifier of the polygonal chain 'poly'
    It can be anything that is unique within a PassDetConfigRecord.
    */
    string id = 1;

    /** Polygonal chain (broken line)
    Must consist of at least two points
    The direction from the first point to the last one is important: it determines the passage direction in the result.
    */
    repeated Point poly = 2;
  }

  /** Lines through which passage will be detected.
  Must contain at least one line.
  Each detection event is associated with exactly one of these lines and the result record will contain its id.
  */
  repeated PassLine pass_lines = 1;
}

/** Configuration for a single ROI filter in RoiFiltersConfigRecord
*/
message RoiFilterConfig
{
  /** Identifier of the roi filter.
  It can be anything that is unique within a RoiFiltersConfigRecord.
  */
  string id = 1;

  /** Minimum confidence of detection for passing the filter
  Compared to the 'detection_confidence' value of ObjectDetectionRecord.
  range: [0..1); 0 means no confidence based filtering
  default: 0
  */
  float min_confidence = 2;

  /** Set of allowed  detection types for passing the filter
  Empty set means no detection type based filtering
  */
  repeated ObjectType detection_types = 3;

  /** ROI: (closed) polygon that a detection centroid needs to be inside to pass
  Empty set means no location based filtering
  Otherwise must contain at least three points, corresponding to polygon vertices
  */
  repeated Point poly = 4;
}

/** Configuration for kafka_roifilter
Each ROI filter can filter ObjectDetectionRecords by any combination of
- detection type
- detection confidence
- location (must be within a ROI)
*/
message RoiFiltersConfigRecord
{
  repeated RoiFilterConfig filters = 1; // at least one ROI filter
}

/**
 Configuration for kafka_reid.

 Concept:
   Inputs are feature vector streams that may be extracted from video camera images or from manually managed images.
   Feature vectors are registered, i.e. stored as a new identity when they are dissimilar to any other stored feature vector.
   Feature vectors are reidentified as an existing identity when they are similar enough to a registered feature vector.
   Each input stream can be used for registration, reidentification, or both.
   Examples:
   - Registering manually managed data: Loading staff database for entrance system.
   - Reidentification from  manually managed data: Searching for people similar to a given photo.
   - Registering data from camera: Dwell time measurement, first camera.
   - Reidentification from data from camera: Dwell time measurement, second camera.

   On reidentification, each stream that is used for registration will provide a top list of matches,
   the final result will be the concatenation of these top lists.
   Each top list has a maximum size configured for that registration stream (reid_max_count).
   A top list can be shorter if there are not enough matches reaching the minimum required score (reid_min_score).

   Registration only happens if the score of the closest match is less than reg_max_score.
   For manually managed streams we recommend this settinng to be 1 (one).
   Registrations are kept in memory for reg_retention_period milliseconds.

 Input: Can be any record type that contains feature vectors and associated model ids.
   For streams that are used for registration, input messages with an already existing key in memory will
   - delete the in-memory feature vector if the payload of the input message is empty
   - update the in-memory feature vector otherwise.

 Output: ReidRecord
 */
message ReidConfigRecord
{
  /** Configuration for a single input stream
  */
  message InputConfig
  {
    string stream_id = 1; ///< Identifier of input stream.
    string fv_field = 2; ///< Name of the field of type FeatureVector in input records.
    string is_active_field = 3; ///< Optional name of a boolean field to filter input records. Only records with a 'true' value will be considered.
    string to_be_ignored_field = 4; ///< Optional name of a boolean field to filter input records. Records with a 'true' value will be ignored.
    bool do_reid = 5; // Input stream can be used for reidentification.
    bool do_reg = 6; // Input stream can be used for registration.

    /** The properties below are only valid when do_reg is 'true'. They should not be set when do_reg is 'false'.
    !Note that even reidentification parameters are associated with the stream where registration happens!
    */

    float reid_min_score = 7; ///< Minimum similarity score for reidentification, i.e. to be included in the list of top matching elements.
    uint32 reid_max_count = 8; ///< Length of the list of top matching elements from this registration stream.
    float reg_max_score = 10; ///< Maximum similarity score (exclusive) to any stored feature vactor, in order for feature vector to be registered.
    int64 reg_retention_period = 11; ///< Registration memory window size [ms]. Also at startup we rewind input this much. 0 means infinite.
  }

  repeated InputConfig inputs = 1; ///< Exactly as many configurations as input streams configured for the service.
}
